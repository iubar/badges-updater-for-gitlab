<?xml version="1.0" encoding="UTF-8" ?> 
<project
  xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
>
  <modelVersion>4.0.0</modelVersion>
  <groupId>it.iubar</groupId>
  <artifactId>badgesupdater</artifactId>
  <version>1.0.6</version>
  <description>...</description>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
	<maven.compiler.release>11</maven.compiler.release>
	<maven.enforcer.version>3.6.1</maven.enforcer.version> 		<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-enforcer-plugin -->
	<maven.version>[3.8.6,)</maven.version>		
    <junit.jupiter.version>5.10.1</junit.jupiter.version>
    <surefire.plugin.version>3.2.2</surefire.plugin.version>    
	<!-- PAY ATTENTION for the jersey.client :	-->
	<!-- 3.0.x is the latest version that supports Java 8 -->
	<!-- 4.x requires Java 17 -->
	<!-- See https://eclipse-ee4j.github.io/jersey.github.io/documentation/latest30x/modules-and-dependencies.html#d0e560 -->
	<!-- https://mvnrepository.com/artifact/org.glassfish.jersey.core/jersey-client-->    
    <jersey.client.version>3.1.11</jersey.client.version> <!-- 3.0.x is the last version supporting jdk8 --> <!-- https://mvnrepository.com/artifact/org.glassfish.jersey.core/jersey-client-->
    
    <maven-assembly-mainclass>it.iubar.badges.ProjectsUpdater</maven-assembly-mainclass>
  </properties>
  <build>
    <finalName>${project.artifactId}</finalName>

    <plugins>
      <!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-compiler-plugin -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.14.0</version>
        <configuration>
			<release>${maven.compiler.release}</release> <!-- non è più obbligatoria questa configurazione esplicita del plugin da maven 3.6 ma ne migliora la leggibilità -->
        </configuration>
      </plugin>
      <!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-assembly-plugin -->
      <plugin>
        <artifactId>maven-assembly-plugin</artifactId>
        <version>3.7.1</version>
        <configuration>
          <!-- <outputDirectory>build/maven/${pom.artifactId}/target</outputDirectory> -->
          <archive>
            <manifest>
              <mainClass>${maven-assembly-mainclass}</mainClass>
              <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
            </manifest>
          </archive>
          <descriptorRefs>
            <descriptorRef>jar-with-dependencies</descriptorRef>
          </descriptorRefs>
        </configuration>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <!-- LEGGERE: https://stackoverflow.com/questions/36970384/surefire-is-not-picking-up-junit-5-tests?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa -->
        <version>${surefire.plugin.version}</version>

        <dependencies>
          <!-- see https://issues.apache.org/jira/browse/SUREFIRE-1732 -->
          <dependency>
            <groupId>org.apache.maven.surefire</groupId>
            <artifactId>surefire-api</artifactId>
            <version>${surefire.plugin.version}</version>
          </dependency>
        </dependencies>
      </plugin>      
  
<!-- https://maven.apache.org/enforcer/enforcer-rules/requireMavenVersion.html -->  
<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-enforcer-plugin -->        
	<plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>${maven.enforcer.version}</version>
        <executions>
          <execution>
            <id>enforce-maven</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <requireMavenVersion>
                  <version>${maven.version}</version>
                </requireMavenVersion>
              </rules>    
            </configuration>
          </execution>
        </executions>
      </plugin>
            
    </plugins>
  </build>
  <dependencies>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <version>${junit.jupiter.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <version>${junit.jupiter.version}</version>
      <scope>test</scope>
    </dependency>

	<!-- E' un fix for "jakarta.activation.DataSource was not found" --> 
	<!-- A cosa serve:-->
	<!-- MIME Type handling: Gestisce i tipi MIME per determinare come trattare diversi tipi di contenuto-->
	<!-- Data binding: Supporta la conversione automatica tra oggetti Java e rappresentazioni (JSON, XML, etc.)-->
	<!-- MessageBodyReader/Writer: Jersey usa questa API per serializzare/deserializzare automaticamente le entità HTTP-->
	<!-- In sintesi: È una dipendenza di supporto che Jersey usa internamente per gestire la conversione dei tipi di contenuto HTTP. --> 
	<!-- Senza di essa potresti avere errori quando Jersey cerca di serializzare/deserializzare automaticamente oggetti.-->
	<!-- Risolve l'errore "A class jakarta.activation.DataSource for a default provider MessageBodyWriter<jakarta.activation.DataSource> was not found."-->		
	<!-- https://mvnrepository.com/artifact/jakarta.activation/jakarta.activation-api -->
	<dependency>
	    <groupId>jakarta.activation</groupId>
	    <artifactId>jakarta.activation-api</artifactId>
	    <version>2.1.4</version> 
	</dependency>
		
    <!-- JSON-P Default Provider (JSR-353) -->
    <!-- https://mvnrepository.com/artifact/jakarta.json/jakarta.json-api -->
	<!-- Non puoi usare jakarta.json-api, da sola perchè queta è solo l’interfaccia. -->
	<!-- Per l'implementazione ho aggiunto la dipendenza Parson' -->
	<!-- API Jakarta JSON-P -->
	<dependency>
	    <groupId>jakarta.json</groupId> 
	    <artifactId>jakarta.json-api</artifactId> <!-- Nota : già incluso in Parsson -->
	    <version>2.1.3</version>
	</dependency>
	<!-- Implementazione Parsson -->
	<!-- See https://github.com/eclipse-ee4j/parsson/blob/master/bundles/dist/src/main/resources/README.txt -->
	<!-- https://mvnrepository.com/artifact/org.eclipse.parsson/parsson -->
	<dependency>
	    <groupId>org.eclipse.parsson</groupId>
	    <artifactId>parsson</artifactId>
	    <version>1.1.7</version>
	</dependency>	
    <!-- https://mvnrepository.com/artifact/org.glassfish.jersey.core/jersey-client -->
    <dependency>
      <groupId>org.glassfish.jersey.core</groupId>
      <artifactId>jersey-client</artifactId>
      <version>${jersey.client.version}</version>
    </dependency>
    <!-- https://mvnrepository.com/artifact/org.glassfish.jersey.inject/jersey-hk2 -->
    <dependency>
      <groupId>org.glassfish.jersey.inject</groupId>
      <artifactId>jersey-hk2</artifactId>
      <version>${jersey.client.version}</version>
    </dependency>
	<!-- https://mvnrepository.com/artifact/org.glassfish.jersey.media/jersey-media-json-processing -->    
	<dependency>
	    <groupId>org.glassfish.jersey.media</groupId>
	    <artifactId>jersey-media-json-processing</artifactId>
	    <version>${jersey.client.version}</version>
	</dependency>       
  </dependencies>
</project>
